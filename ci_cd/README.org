# CI_CD

 Except for the the live CD, all the release artifacts are created within [[https://podman.io/][Podman]]. In the future, maybe =GitHub actions=, =TravisCI= or other solutions will be used for further automation.

* Overview

A bunch of script help build automatically release artifacts for few operating systems (Linux, MacOS or Windows). /There's ongoing work to automate the creation of a [[./live_cd][live CD]]./

The current build server is a virtual machine running [[https://ubuntu.com/][Ubuntu Linux]] with the following software installed (among other applications).

|-----------+-------------------------------------------------------------------|
| Tool      | Purpose                                                           |
|-----------+-------------------------------------------------------------------|
| [[https://podman.io/][podman]]    | Container solution: used to build all artifacts inside containers |
| [[https://imagemagick.org/script/convert.php][convert]]   | [[https://imagemagick.org/][ImageMagick]] program for scaling images during MacOS packaging     |
| [[https://dentrassi.de/2014/02/25/creating-mac-os-x-icons-icns-on-linux/][icnsutils]] | Convert PNG icons to icns format, during MacOS packaging          |
|-----------+-------------------------------------------------------------------|

* About Installers and Packages

While it could be preferrable on Linux to have a native package instead of an =AppImage= and other binaries, it's time consuming (build, test, maintain/support):
  - How many distros do you target?
  - How much testing is required and for which versions of a particular Linux distribution?
  - When you have a service, do you provide associated files for any possible [[https://en.wikipedia.org/wiki/Init][init system]]?
- Under Windows, there are also additional questions:
  - Which software installer to use? Is NSIS still popular, viable and around?
  - How do you deal with "services" in "non-involved ways", i.e. =dangerzone-httpserver=?

The binaries are not signed yet (Windows & MacOS), if possible this should be done inside a container too, without having to switch between different machines...

* Targeted Operating Systems

* Linux 

The GUI is built on a Centos 7 container image to achieve maximal binary compatibility across Linux distributions
- The GUI binary cannot be statically linked
- The libc versions (GLibc and alternatives) vary significantly across distributions, preventing the apps to run

  [[https://github.com/linuxdeploy/linuxdeploy][LinuxDeploy]] is the solution adopted for creating an [[https://docs.appimage.org/][AppImage]] for the GUI. The AppImage requires [[https://wiki.archlinux.org/title/FUSE][Fuse]] tools to run.
  
* Windows

The performance, binaries and other details hasn't been assessed, but this seems to be running just fine.

* MacOS

The performance, binaries and other details hasn't been assessed, but this seems to be running just fine.
