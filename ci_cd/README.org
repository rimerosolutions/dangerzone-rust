#+TITLE: CI_CD README

 Except for the the live CD, most of the release tasks are preformed within [[https://podman.io/][Podman]].
 - In the future, maybe =GitHub actions=, =TravisCI= or other solutions will be used for further automation.
 - Pull requests are welcome for any improvements!

* Overview

A set of shell scripts create release artifacts for supported operating systems (Linux, Mac OS or Windows)
- A Linux [[./live_cd][live CD]] ISO image is alo provided for use with virtual machines
- arm64 binaries are available for Linux and Mac OS

The current build server is a virtual machine running [[https://ubuntu.com/][Ubuntu Linux]] with the following software installed (among other applications).

|------------------+-------------------------------------------------------------------|
| Tool             | Purpose                                                           |
|------------------+-------------------------------------------------------------------|
| [[https://podman.io/][podman]]           | Container solution: used to build all artifacts inside containers |
| [[https://www.nongnu.org/binfmt-support/][binfmt-support]]   | Run arm64 container images on amd64 machines (arm64 packaging)    |
| [[https://wiki.debian.org/QemuUserEmulation][qemu-user-static]] | Run arm64 container images on amd64 machines (arm64 packaging)    |
| [[https://imagemagick.org/script/convert.php][convert]]          | [[https://imagemagick.org/][ImageMagick]] program for scaling images during =Mac OS= packaging  |
| [[https://dentrassi.de/2014/02/25/creating-mac-os-x-icons-icns-on-linux/][icnsutils]]        | Convert PNG icons to icns format, during =Mac OS= packaging       |
| [[https://pandoc.org/][pandoc]]           | Convert man pages from markdown (DEB and RPM packaging)           |
| [[https://www.perl.org/][perl]]             | Alternative to sed to avoid OS specific arguments differences     |
|------------------+-------------------------------------------------------------------|

* About Installers and Packages

While it could be preferrable on Linux to have several native distro packages, it's time consuming (build, test & support):
- On Linux, if you prefer [[https://flatpak.org/][Flatpak]] packages, please check out the [[https://github.com/axtloss/flatpaks][axtloss flatpaks]] project page
- On Windows, binaries are not signed
- On Mac OS, similarly to Windows, binaries are not signed
- =arm64= builds are considered *highly experimental*
  - Executables have been created inside an "emulator", not on real hardware
  - Community help is desired to confirm that "it works" (lack of arm laptop to test)

* Targeted Operating Systems

* Linux 

The GUI is built with the goal to achieve maximal [[https://stackoverflow.com/questions/1771366/binary-compatibility-between-linux-distributions][binary compatibility across Linux distributions]]:
- The GUI binary cannot be statically linked
- The Libc versions ([[https://www.etalabs.net/compare_libcs.html][GLibc and alternatives]]) vary significantly across distributions, preventing the apps to run

  [[https://github.com/linuxdeploy/linuxdeploy][LinuxDeploy]] is the solution adopted for creating an [[https://docs.appimage.org/][AppImage]] for the GUI. The AppImage requires [[https://wiki.archlinux.org/title/FUSE][Fuse]] tools to run.
  
* Windows

The performance, binaries and other details hasn't been assessed, but this seems to be running just fine.

The EXE installer is built with the good old NSIS because it's fairly simple and has been around for a very long time (documentation, familiarity with the tool from projects a while back).

* Mac OS

The performance, binaries and other details hasn't been assessed, but this seems to be running just fine.

For the "app bundle", there might be better ways to run external programs (i.e. not by wrapping the app binary within a shell script)
- https://developer.apple.com/documentation/xcode/embedding-a-helper-tool-in-a-sandboxed-app
- https://stackoverflow.com/questions/27505022/open-another-mac-app

  
