#+TITLE: entrusted/ci_cd


* Overview

It is possible to produce all release artifacts using [[https://github.com/features/actions][GitHub Actions]] or locally.

The local build server is a virtual machine running [[https://ubuntu.com/][Ubuntu Linux]] :
- A *working rootless setup of podman* is required
- Existing shell scripts are meant for release artifacts, in comparison to invoking directly standard parameterized cargo commands
- Local builds are only being tested under Ubuntu with shell scripts, and it's difficult to provide step by step explanations for every single Linux distribution

  [[./images/cicd.png]]

* About Installers and Packages

While it could be preferrable on Linux to have several native distro packages, it's time consuming (build, test & support):
- On Linux, if you prefer [[https://flatpak.org/][Flatpak]] packages, please check out the [[https://github.com/axtloss/flatpaks][axtloss flatpaks]] project page
- On Windows, binaries are not signed
- On Mac OS, similarly to Windows, binaries are not signed
- =arm64= builds are considered *experimental* to an extent:
  - Executables are created by cross-compiling with emulation (=QEMU VM= + =Podman=), not on real =arm64= hardware
  - Community help is desired to confirm that "it works" (lack of "real" arm machine for testing)

* Targeted Operating Systems

** Linux 

The graphical Desktop interface executable is an [[https://docs.appimage.org/][AppImage]] binary with the goal to achieve maximal [[https://stackoverflow.com/questions/1771366/binary-compatibility-between-linux-distributions][compatibility across Linux distributions]]:
- The GUI binary cannot be statically linked
- The Libc versions ([[https://www.etalabs.net/compare_libcs.html][GLibc and alternatives]]) vary significantly across distributions, preventing the apps to run

  [[https://github.com/linuxdeploy/linuxdeploy][LinuxDeploy]] is the solution adopted for creating an =AppImage= executable for the GUI. The AppImage requires [[https://wiki.archlinux.org/title/FUSE][Fuse]] installed to run.
  
** Windows

There's no support yet for creating arm64 Windows binaries. The installer is built with the good old [[https://nsis.sourceforge.io/Main_Page][NSIS]].
  
** Mac OS

For the "app bundle", there might be better ways to run external programs (i.e. instead of wrapping programs with a shell script)
- https://developer.apple.com/documentation/xcode/embedding-a-helper-tool-in-a-sandboxed-app
- https://stackoverflow.com/questions/27505022/open-another-mac-app

* Setting Up a Machine for Release Builds

Below are the dependencies needed *for an Ubuntu Linux* machine.

In practice, with minor adjustments (dependency names), the required software packages should be applicable for any Debian-based distribution (with *systemd*).

#+begin_src sh
  sudo apt update && sudo apt install -y libjpeg8 \
      squashfs-tools \
      xorg-dev \
      musl-dev \
      musl-tools \
      musl \
      wget \
      cmake \
      git \
      fakeroot \
      xz-utils \
      wget \
      systemd-container \
      bzip2 \
      gzip mtools \
      libpango1.0-dev \
      libxft-dev  \
      libx11-dev \
      libxcb-render0-dev \
      libxcb-shape0-dev \
      libxcb-xfixes0-dev \
      libxcb1-dev \
      libxcursor-dev \
      gcc \
      g++ \
      git \
      libpango1.0-dev \
      libcairo2-dev \
      cpio \
      rpm2cpio \
      build-essential rpm pandoc \
      fuse \
      patchelf \
      desktop-file-utils \
      squashfuse \
      icnsutils \
      qemu-user-static \
      podman \
      imagemagick \
      && sudo apt clean
#+end_src
