#+TITLE: entrusted-container README

* What is this?

This is the =backend= part of the solution running inside a "sandbox" ([[https://www.docker.com/][Docker]] or [[https://podman.io/][Podman]] or [[https://github.com/lima-vm/lima][Lima]]).

- There's a small series of transformations leading to the generation of a trusted PDF document (optionally with full-text search support, if [[https://en.wikipedia.org/wiki/Optical_character_recognition][OCR]] was requested)
- There is no command-line invocation of external programs within the container
- OCR is a resources intensive and time consuming: it should always be disabled, unless you NEED to be able to search or select text in the PDF

[[./images/architecture.png]]

* What is required?

This module is deployed as a container image (/Docker/ or /Podman/ or /Lima/), published on [[https://hub.docker.com/r/uycyjnzgntrn/entrusted_container][Docker Hub]].

* How to build this?

Because of a shared library, you must build the container image from the =entrusted= root folder.

** Podman

#+begin_src sh
  podman build -t localhost/entrusted_container . -f entrusted_container/Dockerfile
  podman image prune -f --filter label=stage=entrusted_container_builder
#+end_src

** Docker

#+begin_src sh
  docker build -t localhost/entrusted_container . -f entrusted_container/Dockerfile
  docker image prune -f --filter label=stage=entrusted_container_builder
#+end_src

** Lima

#+begin_src sh
  lima nerdctl build -t localhost/entrusted_container . -f entrusted_container/Dockerfile
  lima nerdctl prune -f --filter label=stage=entrusted_container_builder
#+end_src

For "manual testing" purposes, the following dependencies are required under =Void Linux=:
- =leptonica-devel=
- =libclang=
- =clang=
- =tesseract-ocr-devel=
- =poppler-glib-devel=
- =libreoffice-kit=


* How to publish to Docker Hub?

The command examples below apply to =podman=, the syntax is similar for =docker= or =lima=.

For all the command to follow, it is assumed that you're at the root of the =entrusted_container= folder.

#+begin_src sh
  APPVERSION=$(awk -F ' = ' '$1 ~ /version/ { gsub(/[\"]/, "", $2); printf("%s",$2) }' Cargo.toml)

  podman login -u uycyjnzgntrn docker.io

  podman tag localhost/entrusted_container:latest docker.io/uycyjnzgntrn/entrusted_container:${APPVERSION}
  podman push docker.io/uycyjnzgntrn/entrusted_container:${APPVERSION}

  podman tag docker.io/uycyjnzgntrn/entrusted_container:${APPVERSION} docker.io/uycyjnzgntrn/entrusted_container:latest
  podman push docker.io/uycyjnzgntrn/entrusted_container:latest

  podman logout docker.io
#+end_src

* How to run this?

This application is leveraged by the =entrusted-client= program (shell commands to =podman= or =docker= or =lima=) , it's not really meant to be used "directly" (except for "informed & resourceful" devs).
