#+TITLE: entrusted-client README

* What is this?

This is an application (command-line & desktop GUI), that converts /potentially suspicious documents/ to safe trusted PDF documents.

* What is required?

- For execution, it is assumed that the [[../entrusted_container][entrusted_container]] component is deployed (under [[https://www.docker.com/][Docker]] or [[https://podman.io/][Podman]] or [[https://github.com/lima-vm/lima][Lima]])
- For compilation, you need a recent version of the Rust toolchain ([[https://www.rust-lang.org/tools/install][rustc]] compiler and [[https://doc.rust-lang.org/cargo/][cargo]]).

* What does it look like?

** Graphical desktop client

The user interface is built with the [[https://github.com/fltk-rs/fltk-rs][FLTK]] toolkit because it's lightweight and /relatively/ easy to use.

** Settings window

[[./images/gui-screenshot2.png]]

** Conversion window

[[./images/gui-screenshot.png]]

** Command-line client

The CLI can be convenient for "terminal warriors" or to supplement existing shell scripts workflows (i.e. [[https://unix.stackexchange.com/questions/389705/understanding-the-exec-option-of-find][find-exec]]). It is just a plain old boring command-line!

* How to build this?

At the root of this project, open a command prompt and type =cargo build=.

* How to run this?

** Desktop usage

#+begin_src sh
./target/debug/entrusted-gui
#+end_src

** Command line usage

In the example below, a suspicious PDF file is converted to a searchable PDF ([[https://en.wikipedia.org/wiki/Optical_character_recognition][OCR]]), instead of just PDF images (=ocr-lang= parameter).
- /OCR/ is a time consuming task in comparison to just generating PDF images for pages of the original input.
- You only want /OCR/ if you need to be able to select or search text in the resulting PDF

*** Basic usage

#+begin_src sh
   cp ../test_data/gnus-logo.pdf suspicious_file.pdf
  ./target/debug/entrusted-cli --input-filename suspicious_file.pdf --ocr-lang eng
#+end_src

*** Batch conversion

There's no explicit command-line support for batch conversion, because in a UNIX/Linux environment shell scripting is much more flexible.

In the example below, all the PDF files in the =Downloads= folder of the =me= user will be converted (recursive folder traversal).

#+begin_src sh
  find /home/me/Downloads \
       -name "*.pdf" \
       -exec entrusted-cli --input-filename {} \;
#+end_src

* Is there a configuration file?

Yes, the configuration file (=config.toml=) is optional and its location is operating system dependent.

** Configuration file location

|------------------+------------------------------------------------------------------------------------------------|
| Operating System | Configuration File Location                                                                    |
|------------------+------------------------------------------------------------------------------------------------|
| Linux & Others   | =$XDG_CONFIG_HOME/com.rimerosolutions.entrusted.entrusted_client/config.toml=                  |
| Mac OS           | =$HOME/Library/Application Support/com.rimerosolutions.entrusted.entrusted_client/config.toml= |
| Windows          | =%APPDATA%\com.rimerosolutions.entrusted.entrusted_client\config.toml=                         |
|------------------+------------------------------------------------------------------------------------------------|

** Configuration format

The configuration format is [[https://toml.io/en/][TOML]], it's a bit similar to [[https://en.wikipedia.org/wiki/INI_file][INI]] files syntax.

*** Example

#+begin_src conf-toml
  # This must be a valid tesseract lang code
  # See https://tesseract-ocr.github.io/tessdoc/Data-Files-in-different-versions.html
  ocr-lang = "eng"

  # The converted name will be named as follow original-name-sanitized.pdf
  file-suffix = "sanitized"

  # This is meant mostly for advanced usage (self-hosting, development, etc.)
  # container-image-name= docker.io/MY_USERNAME_HERE/entrusted_container:1.2.3

  # Only if the conversion is successful each document will be opened automatically
  # "Acrobat Reader" is the name of the PDF viewer "as identified" in the GUI client
  # That name isn't just random: the name, spacing and case ALL matter...
  # Only configure this manually if you know what you're doing
  # preview-result-appname=Acrobat Reader
#+end_src

*** Overview

|--------------------------+-------------------------------------------------------------------|
| Parameter                | Description                                                       |
|--------------------------+-------------------------------------------------------------------|
| =ocr-lang=               | The [[https://tesseract-ocr.github.io/tessdoc/Data-Files-in-different-versions.html][tesseract OCR langcode]] is OCR is desired (slower conversions) |
| =file-suffix=            | Custom file suffix for converted files (defaults to =entrusted=)  |
| =container-image-name=   | A custom container image for conversions (advanced option)        |
| =preview-result-appname= | The PDF viewer as identified by the GUI to open converted files   |
|--------------------------+-------------------------------------------------------------------|

In CLI mode (=entrusted-cli=), the =preview-result-appname= parameter is ignored. It's only intended for Desktop usage ("Save current settings as defaults" in the GUI client).
