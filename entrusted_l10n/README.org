#+TITLE: entrusted-l10n README

* What is this?

This is a helper library that provides reusable code for dealing with translations:
- It leverages [[https://www.gnu.org/software/gettext/][GNU Gettext]] for translations in Rust
- It abstracts the underlying GNU Gettext ecosystem from the rest of the components
  - If the project switches from /GNU Gettext/ to [[https://projectfluent.org/][fluent]] for example, only few semantics need to be preserved to match existing behavior
  - Dealing with singular and plural translations
  - Dealing with tokens substitution and passing parameters to translated content
  - The translation files themselves would need to updated, instead of attempting to add more abstraction overhead (file format changes)

* What is required?

The usual Rust toolchain is needed for builds. The code itself is used in other projects (=entrusted_container=, =entrusted_client=, =entrusted_webserver=, =entrusted_webclient=).

* How to build this?

Please run =cargo build= at the root folder of this project.

* How to add new translations?

[[https://www.gnu.org/software/gettext/][GNU Gettext]] is the approach for translating content. It comes with a bunch of command-line utilities on Linux/Unix.

While there are other tools, I personally edit translations using [[https://www.gnu.org/software/emacs/][GNU emacs]] (with [[https://www.emacswiki.org/emacs/PoMode][po-mode]]).

** Tooling

There are [[https://www.gnu.org/software/trans-coord/manual/web-trans/html_node/PO-Editors.html][few popular tools]] for editing GNU Gettext files.

Other software include, but is not limited to the following:
- [[https://virtaal.translatehouse.org/][virtaal]]
- [[https://pootle.translatehouse.org/]]
- [[https://docs.weblate.org/no/latest/devel/gettext.html][Weblate]]
  
** Installing translations

For all the projects, there's a =translations= folder containing relevant /GNU Gettext/ PO files.

The relevant sub-folders for translation follow [[https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes][ISO_639 conventions]]:
- There's an =en= folder for English
- To be more specific to =Canadian English=, there would be an =en-CA= directory

Sample folder structure

#+begin_src text
  translations
    en
      LC_MESSAGES
        messages.po
    fr
      LC_MESSAGES
        messages.po
    messages.pot
#+end_src

You don't need to provide compiled =.mo= files
- Those are automatically generated at build time (i.e. =build.rs= file of other projects)
- The translations are embedded into software executable binaries upon success builds

* Why GNU Gettext?

- It is easy to understand
- Because it's reasonable (features and behavior)
- There are couple of graphical tools for developers and translation contributors
- Many Open Source developers and several old timers know GNU Gettext
- I didn't really like other approaches such as fluent in the context of Rust ([[https://docs.rs/fluent-bundle/0.15.2/fluent_bundle/][fluent-bundle]]). Some of =entrusted_l10n= code originates from https://github.com/woboq/tr/ (dynamic formating for translated text placeholder arguments)
