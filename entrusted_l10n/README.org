#+TITLE: entrusted-l10n README

* What is this?

This is a helper library that provides reusable code for dealing with translations:
- It leverages [[https://www.gnu.org/software/gettext/][GNU Gettext]] for translations in Rust
- It abstracts the underlying GNU Gettext ecosystem from the rest of the components

* What is required?

The usual Rust toolchain is needed for builds. The code itself is used in other modules (=entrusted_container=, =entrusted_client=, =entrusted_webserver=, =entrusted_webclient=).

* How to build this?

Please run =cargo build= at the root folder of this project.

* How to add new translations?

[[https://www.gnu.org/software/gettext/][GNU Gettext]] is the approach for translating content. It comes with a bunch of command-line utilities on Linux/Unix.

** Tooling

There are [[https://www.gnu.org/software/trans-coord/manual/web-trans/html_node/PO-Editors.html][few popular tools]] for editing /GNU Gettext/ files.

Other software include, but is not limited to the following:
- [[https://virtaal.translatehouse.org/][Virtaal]]
- [[https://pootle.translatehouse.org/][Pootle]]
- [[https://docs.weblate.org/no/latest/devel/gettext.html][Weblate]]
  
** Installing translations

For all application modules, there's a =translations= folder containing relevant /GNU Gettext/ PO files.

The relevant sub-folders for translation follow [[https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes][ISO_639 conventions]]:
- There's an =en= folder for English
- For targetting specifically =Canadian English=, there would be an =en-CA= directory

You don't need to provide compiled =.mo= files:
- Those are automatically generated at build time (i.e. =build.rs= file of other projects)
- The translations are embedded into software executable binaries upon successful builds

* Why GNU Gettext?

- It is easy to understand
- It is fairly well documented
- It has a decent set of features
- It has tooling support for both developers and translators
- It provides a familiar feel to many Open Source developers
