name: supportimages
run-name: Build container builder images

on: workflow_dispatch

env:
  IMAGE_REGISTRY: "docker.io"
  RUST_CI_VERSION: "1.72.0"
  DEBIAN_VERSION: "bookworm"

jobs:
  build_publish_grub_image:
    name: BUILDER GRUB
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Prepare environment
      shell: bash
      run: |
        sudo apt-get update && sudo apt-get install -y qemu-user-static podman buildah && sudo apt-get clean
    - name: Build Linux builder images
      shell: bash
      run: |
        cd ${{ github.workspace }}/ci_cd/support && buildah manifest create docker.io/uycyjnzgntrn/grub:latest
        cd ${{ github.workspace }}/ci_cd/support && buildah bud --squash  --platform=linux/amd64 --format docker -t docker.io/uycyjnzgntrn/grub:amd64 -f Dockerfile.grub.amd64 .
        buildah manifest add docker.io/uycyjnzgntrn/grub:latest docker.io/uycyjnzgntrn/grub:amd64
        cd ${{ github.workspace }}/ci_cd/support && buildah bud --squash  --platform=linux/arm64 --format docker -t docker.io/uycyjnzgntrn/grub:arm64 -f Dockerfile.grub.arm64 .
        buildah manifest add docker.io/uycyjnzgntrn/grub:latest docker.io/uycyjnzgntrn/grub:arm64
    - name: Publish Linux image
      uses: redhat-actions/push-to-registry@v2
      with:
        image: grub
        tags: latest
        registry: ${{ env.IMAGE_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        extra-args: |
          --format docker  
  build_publish_windows_images:
    name: BUILDER WINDOWS
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Prepare environment
      shell: bash
      run: |
        sudo apt-get update && sudo apt-get install -y qemu-user-static podman buildah && sudo apt-get clean
    - name: Build Windows builder image
      uses: redhat-actions/buildah-build@v2
      with:
        archs: amd64
        image: ${{ env.IMAGE_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/rust-windows
        tags: ${{ env.RUST_CI_VERSION }}
        oci: false
        context: ci_cd/support
        containerfiles: |
          ci_cd/support/Dockerfile.windows.amd64
        extra-args: |
          --squash 
    - name: Publish Windows builder image
      uses: redhat-actions/push-to-registry@v2
      with:
        image: rust-windows
        tags: ${{ env.RUST_CI_VERSION }}
        registry: ${{ env.IMAGE_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        extra-args: |
          --format docker
  build_publish_macos_images:
    name: BUILDER MACOS
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Prepare environment
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y qemu-user-static podman buildah && sudo apt-get clean
        sudo rm -rf /usr/share/common-licenses /usr/share/doc-base
        sudo apt-get remove -y --purge php8.1  dotnet-apphost-pack-6.0 dotnet-apphost-pack-7.0 dotnet-host  dotnet-hostfxr-6.0 dotnet-hostfxr-7.0 dotnet-runtime-6.0 dotnet-runtime-7.0 dotnet-runtime-deps-6.0 dotnet-runtime-deps-7.0 dotnet-sdk-6.0 dotnet-sdk-7.0 dotnet-targeting-pack
        sudo rm -rf /usr/local/share/boost
        sudo rm -rf $AGENT_TOOLSDIRECTORY
        sudo rm -rf /usr/share/doc /usr/share/java /usr/share/man /usr/share/info
        sudo rm -rf /usr/share/icons /usr/share/applications /usr/share/pixmaps
        find /usr -type f -name "*.png"
        dpkg -l
        mkdir -p ~/.config/containers/
        echo "[storage]" >> ~/.config/containers/storage.conf
        echo "  driver = \"overlay\"" >> ~/.config/containers/storage.conf        
    - name: Build container builder image
      uses: redhat-actions/buildah-build@v2
      with:
        archs: amd64, arm64
        image: ${{ env.IMAGE_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/rust-macos
        tags: ${{ env.RUST_CI_VERSION }}
        oci: false
        context: ci_cd/support
        containerfiles: |
          ci_cd/support/Dockerfile.macos
        extra-args: |
          --squash
    - name: Publish macos builder image
      uses: redhat-actions/push-to-registry@v2
      with:
        image: debian
        tags: ${{ env.RUST_CI_VERSION }}
        registry: ${{ env.IMAGE_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        extra-args: |
          --format docker  
  build_publish_container_builder_images:
    name: BUILDER CONTAINER
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Prepare environment
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y qemu-user-static podman buildah && sudo apt-get clean
    - name: Build container builder image
      uses: redhat-actions/buildah-build@v2
      with:
        archs: amd64, arm64
        image: ${{ env.IMAGE_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/debian
        tags: ${{ env.DEBIAN_VERSION }}-rust-${{ env.RUST_CI_VERSION }}-tesseract5
        oci: false
        context: ci_cd/support
        containerfiles: |
          ci_cd/support/Dockerfile.container.builder
        extra-args: |
          --squash
    - name: Publish debian builder image
      uses: redhat-actions/push-to-registry@v2
      with:
        image: debian
        tags: ${{ env.DEBIAN_VERSION }}-rust-${{ env.RUST_CI_VERSION }}-tesseract5
        registry: ${{ env.IMAGE_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        extra-args: |
          --format docker
  build_publish_linux_images:
    name: BUILDER LINUX
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Prepare environment
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y qemu-user-static podman buildah && sudo apt-get clean
    - name: Build Linux builder images
      shell: bash
      run: |
        cd ${{ github.workspace }}/ci_cd/support && buildah manifest create docker.io/uycyjnzgntrn/rust-linux:${{ env.RUST_CI_VERSION }}
        cd ${{ github.workspace }}/ci_cd/support && buildah bud --squash  --platform=linux/amd64 --format docker -t docker.io/uycyjnzgntrn/rust-linux:${{ env.RUST_CI_VERSION }}-amd64 -f Dockerfile.linux.amd64 .
        buildah manifest add docker.io/uycyjnzgntrn/rust-linux:${{ env.RUST_CI_VERSION }} docker.io/uycyjnzgntrn/rust-linux:${{ env.RUST_CI_VERSION }}-amd64
        cd ${{ github.workspace }}/ci_cd/support && buildah bud --squash --platform=linux/arm64 --format docker -t docker.io/uycyjnzgntrn/rust-linux:${{ env.RUST_CI_VERSION }}-arm64 -f Dockerfile.linux.arm64 .
        buildah manifest add docker.io/uycyjnzgntrn/rust-linux:${{ env.RUST_CI_VERSION }} docker.io/uycyjnzgntrn/rust-linux:${{ env.RUST_CI_VERSION }}-arm64
    - name: Publish Linux image
      uses: redhat-actions/push-to-registry@v2
      with:
        image: rust-linux
        tags: ${{ env.RUST_CI_VERSION }}
        registry: ${{ env.IMAGE_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        extra-args: |
          --format docker
