#+TITLE: dangerzone-httpserver README

* What is this?

This repository provides an online shared service for [[https://github.com/rimerosolutions/dangerzone-rust][suspicious documents conversion to trusted PDFs]].
- The client sends documents to the =server= via HTTP (images, PDF or office documents): Web interface.
- The server sanitizes the original documents and transforms them to PDFs (=dangerzone-cli= command-line invocation).

  The high-level architecture is described below.

  [[./images/architecture.png]]

* General principles

- Balance around minimalism and convenience, but focus on performance.
- Stick to a general common look and feel, in contrast with the Desktop interface
- Avoid large feature gaps with the Desktop interface, based on what is possible in the browser (among other considerations)
- The server immediately deletes documents upon download (original document and its sanitized version)

* What does it look like?

There's a basic Web interface that can be accessed from the server root URL (i.e. [[http://localhost:13000]]).

[[./images/screenshot-web.png]]

* What is the current use-case?

This is used for a single workstation, in a multi virtual machines scenario (several virtual machines: VMs):
- There are several VMS for specific purposes ("dangerzone VM", "programming VM", "socials VM", etc.)
- Inside some of the VMS, there's a need to open safely documents (ebooks, emails attachments, etc.)
  - The "Dangerzone VM" performing document conversions has no internet connectivity.
  - The "Dangerzone VM" only allows SSH and "document conversion requests"
  - The "Dangerzone VM" has limited resources (1GB of RAM allocated).

* What is required?

** Runtime requirements

For the =server= component, any OS that can run the [[https://github.com/rimerosolutions/dangerzone-rust/tree/main/dangerzone-client][dangerzone-cli]] binary:
- It is assumed that the =dangerzone-cli= program is available
- The =dangerzone-cli= program must also be directly accessible (i.e. [[https://www.twilio.com/blog/2017/01/how-to-set-environment-variables.html][in your PATH variable]])

You can run the server as follow, once the program is built (Linux assumed here).

#+begin_src sh
  ./target/x86_64-unknown-linux-musl/release/dangerzone-httpserver
#+end_src
  
** Build requirements

You need to have the [[https://www.rust-lang.org/tools/install][rust compiler tools]] installed in order to compile the code.

** Linux

It's possible to produce standalone binaries on Linux, with no runtime dependencies (for both server and CLI client).
- You can either build with a [[https://wiki.musl-libc.org/projects-using-musl.html#name=Linux_distributions_using_musl][Musl Linux distribution]] ([[https://www.alpinelinux.org/][Alpine Linux]], [[https://voidlinux.org/][Void Linux]], etc.)
- Or you can ensure that the Musl target is installed =rustup target add x86_64-unknown-linux-musl=

  #+begin_src sh
    RUSTFLAGS="-C target-feature=+crt-static" cargo build --release --target=x86_64-unknown-linux-musl
  #+end_src
  
** Other platforms

*** MacOS

#+begin_src sh
  RUSTFLAGS="-C target-feature=+crt-static" cargo build --release
#+end_src

*** Windows

#+begin_src bat
  set RUSTFLAGS=-C target-feature=+crt-static
  cargo build --release
#+end_src

* Is there an API?

Yes, the user interface (simple HTML page) interacts with the Web API of the =dangerzone-httpserver=.

There are three key API endpoints from a developer perspective.

|-------------------+-------------+----------------------------------------|
| Endpoint          | HTTP Method | Description                            |
|-------------------+-------------+----------------------------------------|
| =/upload=         | POST        | Uploading a file to sanitize           |
| =/events/{id}=    | GET         | Processing notifications via SSE       |
| =/downloads/{id}= | GET         | Download a successfully sanitized file |
|-------------------+-------------+----------------------------------------|

** Uploading a file to sanitize

The =/upload= endpoint receives files to process (=multipart/form-data=). As soon as the document is uploaded without errors, document sanitization process is kicked-off automatically and the API client can start consuming "processing updates".

|------------+-----------+----------------------------------------------------------|
| Parameters | Required? | Description                                              |
|------------+-----------+----------------------------------------------------------|
| =file=     | YES       | The file bytes                                           |
| =filename= | YES       | The file name for the uploaded file                      |
| =ocrlang=  | NO        | A valid [[https://tesseract-ocr.github.io/tessdoc/Data-Files-in-different-versions.html][OCR Tesseract LangCode]] such as =eng= for English |
|------------+-----------+----------------------------------------------------------|

If the upload was successful, the server returns a JSON payload with a reference =id= of the file being processed (HTTP 202 =ACCEPTED=. The returned =tracking_uri= helps processing notification updates.

#+begin_src js
  {
    "id": "20943e8a-a68c-42bc-8747-7e30a467c1be"
    "tracking_uri": "/events/20943e8a-a68c-42bc-8747-7e30a467c1be"
  }
#+end_src

The retrieved =id= used subsequently to receive processing notifications (=tracking_uri=), as well as downloading the converted document once the uploaded file is successfully sanitized.


** Consuming processing notifications

The =/events/{id}= endpoint informs clients about conversion progress via [[https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events][SSE events]] (=text/event-stream=).
- The =id= path parameter to provide is the one obtained upon file upload submission (=/upload= endpoint).
- In order to consume events, you need to open an event source connection to the server, different from traditional GET
  - [[https://golb.hplar.ch/2018/02/Access-Server-Sent-Events-from-Java.html][Java SSE client example]]
  - [[https://javascript.info/server-sent-events][JavaScript SSE client example]]
  - Please search on the Internet for "SSE MyProgrammingLanguage", more generally speaking

There's no need =blindly poll= indefintely the =downloads= endpoint with a hope that processing was successful.

|-----------------------+---------------------+-------------------------------------------------------|
| Custom Emitted Events | =data= field Format | =data= field Description                              |
|-----------------------+---------------------+-------------------------------------------------------|
| =processing_update=   | JSON                | ={"data":"doing stuff", "percent_complete":65}=       |
| =processing_success=  | JSON                | ={"data":"/downloads/id123", "percent_complete":100}= |
| =processing_failure=  | JSON                | ={"data":"doing stuff", "percent_complete":100}=      |
|-----------------------+---------------------+-------------------------------------------------------|

** Downloading files

The =/downloads/{id}= endpoints allows downloading successfully converted documents
- The =id= path parameter to provide is the one obtained upon file upload submission (=/upload= endpoint)
- Instead of hardcoding the URL, you should parse the data field of the =processing_success= field (from processing notifications).

 Please note that once downloaded, the file is immediately deleted from the server!
