#+TITLE: dangerzone-httpserver README

* Overview

This repository provides an online shared service for [[https://github.com/rimerosolutions/dangerzone-rust][suspicious documents conversion to trusted PDFs]].
- The client sends documents to the =server= via HTTP (images, PDF or office documents): Web interface.
- The server sanitizes the original documents and transforms them to PDFs (=dangerzone-cli= command-line invocation).

  The high-level architecture is described below.

  [[./images/architecture.png]]

* General principles

- Balance around minimalism and convenience, but focus on performance.
- Stick to a general common look and feel, in contrast with the Desktop interface
- Avoid large feature gaps with the Desktop interface, based on what is possible in the browser (among other considerations)
- The server immediately deletes documents upon download (original document and its sanitized version)

* Screenshot

There's a basic Web interface that can be accessed from the server root URL (i.e. [[http://localhost:13000]]).

[[./images/screenshot-web.png]]

* Current use-case

This is used for a single workstation, in a multi virtual machines scenario (several virtual machines: VMs):
- There are several VMS for specific purposes ("dangerzone VM", "programming VM", "socials VM", etc.)
- Inside some of the VMS, there's a need to open safely documents (ebooks, emails attachments, etc.)
  - The "Dangerzone VM" performing document conversions has no internet connectivity.
  - The "Dangerzone VM" only allows SSH and "document conversion requests"
  - The "Dangerzone VM" has limited resources (1GB of RAM allocated).

* Requirements

** To run

For the =server= component, any OS that can run the [[https://github.com/rimerosolutions/dangerzone-rust/tree/main/dangerzone-client][dangerzone-cli]] binary:
- It is assumed that the =dangerzone-cli= program is available
- The =dangerzone-cli= program must also be directly accessible (i.e. [[https://www.twilio.com/blog/2017/01/how-to-set-environment-variables.html][in your PATH variable]])

You can run the server as follow, once the program is built (Linux assumed here).

#+begin_src sh
  ./target/x86_64-unknown-linux-musl/release/dangerzone-httpserver
#+end_src
  
** To build

You need to have the [[https://www.rust-lang.org/tools/install][rust compiler tools]] installed in order to compile the code.

** Linux

It's possible to produce standalone binaries on Linux, with no runtime dependencies (for both server and CLI client).
- You can either build with a [[https://wiki.musl-libc.org/projects-using-musl.html#name=Linux_distributions_using_musl][Musl Linux distribution]] ([[https://www.alpinelinux.org/][Alpine Linux]], [[https://voidlinux.org/][Void Linux]], etc.)
- Or you can ensure that the Musl target is installed =rustup target add x86_64-unknown-linux-musl=

  #+begin_src sh
    RUSTFLAGS="-C target-feature=+crt-static" cargo build --release --target=x86_64-unknown-linux-musl
  #+end_src
  
** Other platforms

*** MacOS

#+begin_src sh
  RUSTFLAGS="-C target-feature=+crt-static" cargo build --release
#+end_src

*** Windows

#+begin_src bat
  set RUSTFLAGS=-C target-feature=+crt-static
  cargo build --release
#+end_src
